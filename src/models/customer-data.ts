import {ModoChat} from "#src/app.js";
import {ModoChatUserData} from "#src/types/app.js";
import {fetchUpdateUserData} from "#src/utils/fetch.js";

class CustomerData {
  private _uniqueId?: string;
  private _userData?: Record<string, any>;
  private modo: ModoChat;
  phoneNumber?: string;

  constructor(modo: ModoChat, userData?: ModoChatUserData) {
    this.modo = modo;
    this.initializeUniqueId();
    this.initializeUserData(userData);
    this.initializePhoneNumber();
  }

  initializePhoneNumber() {
    const savedPhoneNumber = localStorage.getItem(`modo-chat:${this.modo.publicKey}-user-phone-number`);
    if (savedPhoneNumber) {
      this.phoneNumber = savedPhoneNumber;
    }
  }

  /**
   * Initialize unique ID from localStorage or generate a new one
   * Unique ID is independent of user key/data and is generated by ourselves
   */
  private initializeUniqueId(): void {
    const savedUniqueId = localStorage.getItem(`modo-chat:${this.modo.publicKey}-user-unique-id`);

    if (savedUniqueId) {
      this._uniqueId = savedUniqueId;
    } else {
      // Generate a new UUID if no saved unique ID exists
      this._uniqueId = crypto.randomUUID();
      this.saveUniqueIdToLocalStorage();
    }
  }

  /**
   * Initialize user data from localStorage and provided options
   */
  private initializeUserData(userDataOptions?: ModoChatUserData): void {
    if (userDataOptions) {
      this._userData = userDataOptions;
    }
  }

  /**
   * Get the current unique ID
   */
  get uniqueId(): string {
    return this._uniqueId!;
  }

  /**
   * Get the current user data
   */
  get userData(): Record<string, any> {
    return this._userData || {};
  }

  /**
   * Update the unique ID with a new value
   * @param newUniqueId - The new unique ID to set (optional, will generate UUID if not provided)
   */
  updateUniqueId(newUniqueId?: string): void {
    if (newUniqueId && newUniqueId.trim() !== "") {
      this._uniqueId = newUniqueId.trim();
    } else {
      this._uniqueId = crypto.randomUUID();
    }
    this.saveUniqueIdToLocalStorage();
  }

  /**
   * Update user data with new values
   * @param newUserData - Object containing new user data to merge
   */
  updateUserData(newUserData: Record<string, any>): void {
    this._userData = newUserData;
    this.fetchUpdate();
  }

  /**
   * Save the current unique ID to localStorage
   */
  private saveUniqueIdToLocalStorage(): void {
    localStorage.setItem(`modo-chat:${this.modo.publicKey}-user-unique-id`, this._uniqueId!);
  }

  hasSubmittedPhoneForm(): boolean {
    return Boolean(this.phoneNumber);
  }

  savePhoneNumber(phoneNumber?: string) {
    this.phoneNumber = phoneNumber || "no phone number";
    localStorage.setItem(`modo-chat:${this.modo.publicKey}-user-phone-number`, phoneNumber || "no phone number");
  }

  fetchUpdate() {
    if (typeof this._userData === "object") fetchUpdateUserData(this.modo.publicData?.setting.uuid as string, this.uniqueId, this.modo.customerData.userData);
    else console.warn("no user data to update");
  }
}
export {CustomerData};

import {ModoChat} from "#src/app.js";
import {fetchUpdateUserData} from "#src/utils/fetch.js";

class CustomerData {
  private _uniqueId?: string;
  private _userData?: Record<string, any>;
  private modo: ModoChat;
  phoneNumber?: string;

  constructor(modo: ModoChat, userData?: Record<string, any>) {
    this.modo = modo;
    this.initializeUniqueId();
    this.updateUserData(userData);
    this.initializePhoneNumber();
  }

  initializePhoneNumber() {
    const savedPhoneNumber = localStorage.getItem(`modo-chat:${this.modo.publicKey}-user-phone-number`);
    if (savedPhoneNumber) {
      this.phoneNumber = savedPhoneNumber;
    }
  }

  /**
   * Initialize unique ID from localStorage or generate a new one
   * Unique ID is independent of user key/data and is generated by ourselves
   */
  private initializeUniqueId(): void {
    const savedUniqueId = localStorage.getItem(`modo-chat:${this.modo.publicKey}-user-unique-id`);

    if (savedUniqueId) {
      this._uniqueId = savedUniqueId;
    } else {
      // Generate a new UUID if no saved unique ID exists
      this._uniqueId = crypto.randomUUID();
      localStorage.setItem(`modo-chat:${this.modo.publicKey}-user-unique-id`, this._uniqueId);
    }
  }

  /**
   * Get the current unique ID
   */
  get uniqueId(): string {
    return this._uniqueId!;
  }

  /**
   * Get the current user data
   */
  get userData(): Record<string, any> {
    return this._userData || {};
  }

  /**
   * Update user data with new values
   * @param newUserData - Object containing new user data to merge
   */
  async updateUserData(newUserData?: Record<string, any>): Promise<void> {
    if (newUserData && typeof newUserData === "object") {
      this._userData = newUserData;
      await this.fetchUpdate();
    } else if (newUserData) console.warn("Invalid user data");
  }

  hasSubmittedPhoneForm(): boolean {
    return Boolean(this.phoneNumber);
  }

  savePhoneNumber(phoneNumber?: string) {
    this.phoneNumber = phoneNumber || "no phone number";
    localStorage.setItem(`modo-chat:${this.modo.publicKey}-user-phone-number`, phoneNumber || "no phone number");
  }

  async fetchUpdate() {
    await fetchUpdateUserData(this.modo.publicData?.setting.uuid as string, this.uniqueId, this.userData);
  }
}
export {CustomerData};
